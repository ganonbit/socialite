datasource DS {
  // optionally set multiple providers
  // example: provider = ["sqlite", "postgresql"]
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

// Define your own datamodels here and run `yarn redwood db save` to create
// migrations for them.

//Enums
enum Role {
  USER
  ADMIN
}

enum Social {
  USER
  ADMIN
}

//Models
model User {
  id            Int            @id @unique @default(uuid())
  createdAt     DateTime       @default(now())
  email         String         @unique
  username      String         @unique
  firstName     String
  lastName      String
  birthday      DateTime?
  bio           String?
  image         String?
  imagePublicId String?
  isOnline      Boolean        @default(false)
  isVerified    Boolean        @default(false)
  isBanned      Boolean        @default(false)
  socialHandles SocialHandle[]
  role          Role           @default(USER)
  posts         Post[]         @relation
  messages      Message[]      @relation
  followers     Follow[]       @relation
  following     Follow[]       @relation
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  title     String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Message {
  id        Int      @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isSeen    Boolean  @default(false)
  message   String
  sender    User?    @relation
  receiver  User?    @relation
}

model SocialHandle {
  id            Int      @id @unique @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  url           String
  provider      Social
  imagePublicId String?
  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?
}

model Follow {
  id            Int      @id @unique @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  url           String
  provider      Social
  imagePublicId String?
  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?
}
